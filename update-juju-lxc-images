#!/bin/bash
#
# This script will create lxd images that will be used by the
# lxd provider in juju 2.1+ It is for use with the lxd provider for local
# development and preinstalls a common set of production packages.
#
# This is important, as between them, basenode and layer-basic install ~111
# packages, before we even get to any packages installed by your charm.
#
# It also installs some helpful development tools, and pre-downloads some
# commonly used packages.
#
# This dramatically speeds up the install hooks for lxd deploys. On my slow
# laptop, average install hook time went from ~7min down to ~1 minute.
set -eux

# The basic charm layer also installs all the things. 47 packages.
LAYER_BASIC="gcc build-essential python3-pip python3-setuptools python3-yaml"

# the basic layer also installs virtualenv, but the name changed in xenial.
TRUSTY_PACKAGES="python-virtualenv"
XENIAL_PACKAGES="virtualenv"
BIONIC_PACKAGES="virtualenv"

# Predownload common packages used by your charms in development
DOWNLOAD_PACKAGES=

CLOUD_INIT_PACKAGES="tmux curl bridge-utils cloud-image-utils cloud-utils cpu-checker distro-info genisoimage ibverbs-providers libaio1 libibverbs1 libiscsi7 libnl-3-200 libnl-route-3-200 libnspr4 libnss3 librados2 librbd1 msr-tools qemu-block-extra qemu-utils sharutils ubuntu-fan"

PACKAGES="$LAYER_BASIC $DOWNLOAD_PACKAGES"

JUJU_FULL_VERSION=`juju version` # 2.4.4-bionic-amd64
JUJU_VERSION=`echo $JUJU_FULL_VERSION | awk -F"-" '{print $1}'`
OS_VERSION=`echo $JUJU_FULL_VERSION | awk -F"-" '{print $2}'`
ARCH=`echo $JUJU_FULL_VERSION | awk -F"-" '{print $3}'`

function cache() {
    series=$1
    container=juju-${series}-base
    alias=juju/$series/amd64

    lxc delete $container -f || true
    lxc launch ubuntu:$series $container
    sleep 15  # wait for network

    lxc exec $container -- apt update -y
    lxc exec $container -- apt upgrade -y
    lxc exec $container -- apt install -y $CLOUD_INIT_PACKAGES $PACKAGES $2

    # Install juju agent
    echo "Installing Juju agent $JUJU_FULL_VERSION"
    # TODO: verify if the version exists

    lxc exec $container -- mkdir -p /var/lib/juju/tools/$JUJU_FULL_VERSION/

    lxc exec $container -- curl -sS --connect-timeout 20 --noproxy \* --insecure -o /var/lib/juju/tools/$JUJU_FULL_VERSION/tools.tar.gz  https://streams.canonical.com/juju/tools/agent/$JUJU_VERSION/juju-$JUJU_VERSION-ubuntu-$ARCH.tgz

    lxc exec $container -- tar zxf /var/lib/juju/tools/$JUJU_FULL_VERSION/tools.tar.gz -C /var/lib/juju/tools/$JUJU_FULL_VERSION || true

    # Cache pip packages so installation into venv is faster?
    # pip3 download --cache-dir ~/.cache/pip charmhelpers

    lxc stop $container

    lxc image delete $alias || true
    lxc publish $container --alias $alias description="$series juju dev image ($(date +%Y%m%d))"

    lxc delete $container -f || true
}

# Enable caching of the serie(s) you're developing for. By default, this will
# be the most recent Long Term Release (LTS)
# cache trusty "$TRUSTY_PACKAGES"
# cache xenial "$XENIAL_PACKAGES"
cache bionic "$BIONIC_PACKAGES"
